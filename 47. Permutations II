class Solution {
    public void recur(int[] nums,Set<List<Integer>> ans,List<Integer> temp,int n,int[] checked){
        if(temp.size() == n){
            System.out.println(temp);
            ans.add(new ArrayList<>(temp));
            return;
        }

        for(int i=0;i<n;i++){
            if(checked[i] == 0){
                checked[i] = 1;
                temp.add(nums[i]);
                recur(nums,ans,temp,n,checked);
                temp.remove(temp.size()-1);
                checked[i] = 0;
            }
        }
    }
    public List<List<Integer>> permuteUnique(int[] nums) {
        Set<List<Integer>> ans = new HashSet<>();
        int[] checked = new int[nums.length];

        List<Integer> temp = new ArrayList<>();
        recur(nums,ans,temp,nums.length,checked);

        List<List<Integer>> result = new ArrayList<>();
        System.out.println(ans);
        for(List<Integer> t : ans) result.add(t);
        return result;


    }
}
