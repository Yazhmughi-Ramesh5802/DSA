import java.util.* ;
import java.io.*; 
public class Solution {

	public static int func(int ind1,int ind2,String s,String r,int[][] dp){
		if(ind1<0 || ind2<0) return 0;
		if(dp[ind1][ind2] != -1) return dp[ind1][ind2]; 

		if(s.charAt(ind1) == r.charAt(ind2)) {
			
			return 1 + func(ind1-1,ind2-1,s,r,dp);
			
		}
		
		return dp[ind1][ind2] = Math.max(func(ind1-1,ind2,s,r,dp),func(ind1,ind2-1,s,r,dp));
		
	}
	public static int longestPalindromeSubsequence(String s) {
		String rev = "";
		int n = s.length();
		for(int i=n-1;i>=0;i--) rev+=Character.toString(s.charAt(i));
		int[][] dp = new int[n+1][n+1];
		for(int[] row : dp) Arrays.fill(row,-1);
		
		return func(n-1,n-1,s,rev,dp);
	}
}
