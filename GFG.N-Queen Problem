//{ Driver Code Starts
// Initial Template for Java

import java.io.*;
import java.util.*;
import java.lang.*;

class GFG{
    public static void main(String args[])throws IOException
    {
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(in.readLine());
        while(t-- > 0) {
            int n = Integer.parseInt(in.readLine());
            
            Solution ob = new Solution();
            ArrayList<ArrayList<Integer>> ans = ob.nQueen(n);
            if(ans.size() == 0)
                System.out.println("-1");
            else {
                for(int i = 0;i < ans.size();i++){
                    System.out.print("[");
                    for(int j = 0;j < ans.get(i).size();j++)
                        System.out.print(ans.get(i).get(j) + " ");
                    System.out.print("] ");
                }
                System.out.println();
            }
        }
    }
}
// } Driver Code Ends


// User function Template for Java

class Solution{
    static ArrayList<ArrayList<Integer>> nQueen(int n) {
        ArrayList<ArrayList<Integer>> ans = new ArrayList<>();
        ArrayList<Integer> temp = new ArrayList<>();
        
        char[][] board = new char[n][n];
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                board[i][j]='.';
            }
        }
        
        dfs(board,ans,0,temp);
        return ans;
    }
    public static boolean isValid(char[][] board,int row,int col){
        int dR = row;
        int dC = col;
        
        while(col>=0){
            if(board[row][col]=='Q') return false;
            col--;
        }
        
        col = dC;
        
        while(row<board.length && col>=0){
            if(board[row][col]=='Q') return false;
            row++;
            col--;
        }
        row = dR;
        col = dC;
        
        while(row>=0 && col>=0){
            if(board[row][col]=='Q') return false;
            row--;
            col--;
        }
        return true;
    }
    
    public static ArrayList<Integer> construct(char[][] board){

        ArrayList<Integer> temp = new ArrayList<>();
        
        for(int i=0;i<board.length;i++){
            for(int j=0;j<board.length;j++){
                if(board[j][i]=='Q'){
                    temp.add(j+1);
                    break;
                }
            }
        }
        
        return temp;
    }
    public static void dfs(char[][] board, ArrayList<ArrayList<Integer>> ans,int col,ArrayList<Integer> temp){
        int l = board.length;
        
        
        if(col == l){
            ans.add(construct(board));
            return;
        }
        
        for(int row=0;row<l;row++){
            if(isValid(board,row,col)){
                board[row][col] = 'Q';

                temp.add(col);
                dfs(board,ans,col+1,temp);
                board[row][col] = '.';
                
                
            }
        }
    }
}
