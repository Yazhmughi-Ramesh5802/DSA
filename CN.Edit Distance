import java.util.*;
public class Solution {
    public static int func(int i,int j,String s1,String s2,int[][] dp){
        if(i<0) return j+1;
        if(j<0) return i+1;
        if(dp[i][j]!=-1) return dp[i][j];
        if(s1.charAt(i) == s2.charAt(j)) return 0 + func(i-1,j-1,s1,s2,dp); // reduce both indexes
        int insert = 1 + func(i,j-1,s1,s2,dp);
        int delete = 1 + func(i-1,j,s1,s2,dp);
        int replace = 1 + func(i-1,j-1,s1,s2,dp);
        return dp[i][j] = Math.min(insert,Math.min(delete,replace)); 
    }
    public static int editDistance(String str1, String str2) {
        int m = str1.length();
        int n = str2.length();
        // int[][] dp = new int[m][n];
        // for(int[] row : dp) Arrays.fill(row,-1);
        // return func(m-1,n-1,str1,str2,dp);

        int[][] dp = new int[m+1][n+1];
        for(int i=0;i<=n;i++) dp[0][i] = i;
        for(int j=0;j<=m;j++) dp[j][0] = j;

        for(int i=1;i<=m;i++){
            for(int j=1;j<=n;j++){
                if(str1.charAt(i-1) == str2.charAt(j-1)) dp[i][j] = dp[i-1][j-1];
                else{
                    int insert = 1 + dp[i][j-1];
                    int delete = 1 + dp[i-1][j];
                    int replace = 1 + dp[i-1][j-1];
                    dp[i][j] = Math.min(insert,Math.min(delete,replace));
                }
            }
        }
        return dp[m][n];
    }
}
