class Solution {
    public boolean isValid(char[][] board,int row,int col){
        int dR = row;
        int dC = col;

        while(col>=0){
            if(board[row][col]=='Q') return false;
            col--;
        }
        col = dC;
        while(row>=0 && col>=0){
            if(board[row][col]=='Q') return false;
            row--;col--;
        }
        row = dR;
        col = dC;
        while(row<board.length && col>=0){
            if(board[row][col]=='Q') return false;
            row++;
            col--;
        }
        return true;

    }
    public static List<String> construct(char[][] board){
        List <String> temp = new LinkedList<>();
        for(int i=0;i<board.length;i++) {
            String s = new String(board[i]);
            temp.add(s);
        }
        return temp;
    }
    public void dfs(char[][] board,List<List<String>> ans,int col){
        int l = board.length;
        if(col==l){
            ans.add(construct(board));
            return;

        }
        else{
            for(int row=0;row<l;row++){
                if(isValid(board,row,col)){
                    board[row][col]='Q';
                    dfs(board,ans,col+1);
                    board[row][col]='.';
                    

                }
            }
 
        }
    }
    public List<List<String>> solveNQueens(int n) {
        // step 1 : create board
        char[][] board = new char[n][n];
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                board[i][j]='.';
            }
        }
        
        List<List<String>> ans = new ArrayList<List<String>>();
        dfs(board,ans,0);
        return ans;
        // step 2 : perform dfs operation

    }
}
