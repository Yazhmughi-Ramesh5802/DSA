class Solution {
    public static int func(int i, int buy,int cap,int[] prices,int n,int[][][] dp){
        if(cap==0 || i==n) return 0;

        int profit = 0;
        if(dp[i][buy][cap] != -1) return dp[i][buy][cap];
        if(buy == 0){
            int take = -prices[i] + func(i+1,1,cap,prices,n,dp);
            int dontTake = 0 + func(i+1,0,cap,prices,n,dp);
            profit = Math.max(take,dontTake);
            return dp[i][buy][cap] = profit;
        }
        else{
            int sell = prices[i] + func(i+1,0,cap-1,prices,n,dp);
            int dontSell = 0 + func(i+1,1,cap,prices,n,dp);
            profit = Math.max(sell,dontSell);
            return dp[i][buy][cap] = profit;
        }

    }
    public int maxProfit(int[] prices) {
        int[][][] dp = new int[prices.length][2][3];
        for(int[][] row1 : dp){
            for(int[] row2 : row1) Arrays.fill(row2,-1);
        }
        return func(0,0,2,prices,prices.length,dp);       
    }
}
