import java.util.Arrays;

public class Solution {
    public static long func(int ind,int buy,long[] values,int n,long[][] dp){
        if(ind==n) return 0;
        long profit = 0;
        if(dp[ind][buy] != -1) return dp[ind][buy];
        if(buy == 1){
            long take = -values[ind] + func(ind+1,0,values,n,dp);
            long dontTake = 0 + func(ind+1,1,values,n,dp);
            profit = Math.max(take,dontTake);
            return dp[ind][buy] = profit; 
        }
        else{
            long sell = values[ind] + func(ind+1,1,values,n,dp);
            long dontSell = 0 + func(ind+1,0,values,n,dp);
            profit = Math.max(sell,dontSell);
            return dp[ind][buy] = profit;
        }
    }
    public static long getMaximumProfit (int n, long[] values) {
        // long[][] dp = new long[n][2];
        // for(long[] row : dp) Arrays.fill(row,-1);
        // return func(0,1,values,n,dp);

        long[][] dp = new long[n+1][2];
        dp[n][0] = 0;
        dp[n][1] = 0;
        long profit = 0;
        for(int i=n-1;i>=0;i--){
            //for(int buy=1;buy>=0;buy--){ we can use the below commented return statement for this condition of looping
            for(int buy=0;buy<=1;buy++){
                if(buy == 0){
                    long take = -values[i] + dp[i+1][1];
                    long dontTake = 0 + dp[i+1][0];
                    profit = Math.max(take,dontTake);
                    
                }
                if(buy==1){
                    long sell = values[i] + dp[i+1][0];
                    long dontSell = 0 + dp[i+1][1];
                    profit = Math.max(sell,dontSell);
                    
                }
                dp[i][buy] = profit;
            }
        }
        //return dp[0][1];
        return dp[0][0];
    }
}
