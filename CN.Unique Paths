import java.util.* ;
import java.io.*; 
public class Solution {
	public static int fun(int i,int j,int[][] dp){
		if(i==0 && j==0) return dp[0][0] = 1;
		else if(i<0 || j<0) return 0;
		if(dp[i][j]!=-1) return dp[i][j];
		int up = fun(i-1,j,dp);
		int left = fun(i,j-1,dp);
		return dp[i][j] = up+left;
	}
	public static int uniquePaths(int m, int n) {
		//recursion solution
		// int[][] dp = new int[m][n];
		// for(int[] rows : dp) Arrays.fill(rows, -1);
		// return fun(m-1,n-1,dp);

		// solution without recursion
		int[][] dpArray = new int[m][n];

		
		for(int i=0;i<m;i++){
			int up = 0;
			int left = 0;
			for(int j=0;j<n;j++){
				if(i==0 && j==0) {dpArray[i][j] = 1;continue;}
				if(i>0){
					up = dpArray[i-1][j];
				}
				if(j>0) {
					left = dpArray[i][j-1];
				}	

				dpArray[i][j] = up + left;
			}
		}

		return dpArray[m-1][n-1];
	}
}
