import java.util.* ;
import java.io.*; 

public class Solution{

    public static int func(int ind,int[] wt,int[] val,int maxWeight,int[][] dp){
        if(ind == 0){
            
            if(wt[0]<=maxWeight) return val[0];
            return 0;
        }
        if(dp[ind][maxWeight]!=-1) return dp[ind][maxWeight];
        int dontTake = 0 + func(ind-1,wt,val,maxWeight,dp);
        int take = Integer.MIN_VALUE;
        if(wt[ind]<=maxWeight) take = val[ind] + func(ind-1,wt,val,maxWeight-wt[ind],dp);
        return dp[ind][maxWeight] = Math.max(take,dontTake);
    }

    static int knapsack(int[] weight, int[] value, int n, int maxWeight) {
        int[][] dp = new int[n][maxWeight+1];
        for(int[] row : dp) Arrays.fill(row,-1);
        return func(n-1,weight,value,maxWeight,dp);


    }
}
