
import java.util.*;
public class Solution {
    public static int func(int i,int j,String s,String t,int[][] dp){
        if(j<0) return 1;
        if(i<0) return 0;
        if(dp[i][j]!=-1) return dp[i][j];

        if(s.charAt(i) == t.charAt(j)) {
            return dp[i][j] = func(i-1,j,s,t,dp) + func(i-1,j-1,s,t,dp);
        }
        else return dp[i][j] = func(i-1,j,s,t,dp);
    }
    public static int distinctSubsequences(String str, String sub) {
        int m = str.length();
        int n = sub.length();
        // int[][] dp = new int[m][n];
        // for(int[] row : dp) Arrays.fill(row,-1);
        // return func(m-1,n-1,str,sub,dp);

        double[][] dp = new double[m+1][n+1];
        for(int i=0;i<=m;i++) dp[i][0] = 1;
        //for(int j=1;j<=n;j++) dp[0][j] = 0; no need bcoz its 0 by default

        for(int i=1;i<=m;i++){
            for(int j=1;j<=n;j++){
                if(str.charAt(i-1)==sub.charAt(j-1)){
                    dp[i][j] = dp[i-1][j] + dp[i-1][j-1];
                }
                else dp[i][j] = dp[i-1][j];
            }
        }
        return (int)dp[m][n];
    }
}
