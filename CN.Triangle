import java.util.* ;
import java.io.*; 
public class Solution {
    public static int func(int i,int j,int[][] triangle,int n,ArrayList<ArrayList<Integer>> dp){
        if(i==n-1){
            return triangle[i][j];
        }
        if(dp.get(i).get(j)!=-1) return dp.get(i).get(j);
        int down = triangle[i][j] + func(i+1,j,triangle,n,dp);
        int diag = triangle[i][j] + func(i+1,j+1,triangle,n,dp);

        dp.get(i).set(j,Math.min(down,diag));
        return Math.min(down,diag);
    }
    public static int minimumPathSum(int[][] triangle, int n) {
        int m = triangle.length;
        ArrayList<ArrayList<Integer>> dp = new ArrayList<>();
        ArrayList<Integer> temp = new ArrayList<>();
        // for(int i=0;i<m;i++){
        //     temp = new ArrayList<>();
        //     for(int j=0;j<i+1;j++) {
        //         temp.add(-1);
        //     }
        //     dp.add(temp);
        // }
        // //System.out.println(dp);
        // return func(0,0,triangle,n,dp);

        for(int i=0;i<m;i++){
            temp = new ArrayList<>();
            for(int j=0;j<i+1;j++) {
                temp.add(0);
            }
            dp.add(temp);
        }

        for(int i=0;i<n;i++){
            dp.get(n-1).set(i,triangle[n-1][i]);
        }

        for(int i=n-2;i>=0;i--){
            for(int j=i;j>=0;j--){
                int down = triangle[i][j] + dp.get(i+1).get(j);
                int diag = triangle[i][j] + dp.get(i+1).get(j+1);
                dp.get(i).set(j,Math.min(down,diag));
            }
        }
        return dp.get(0).get(0);


    }
}
