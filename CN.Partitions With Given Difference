import java.util.* ;
import java.io.*; 
public class Solution {
	public static int func(int ind,int target,int[] arr,int[][] dp){
		int mod = (int)(Math.pow(10,9)+7);
		if(ind==0){
			if(arr[0]==0 && target==0) return 2;
			else if(target==0 || arr[0]==target) return 1;
			else return 0;
		}
		
		if(dp[ind][target]!=-1) return dp[ind][target];
		int dontTake = func(ind-1,target,arr,dp);
		int take = 0;
		if(arr[ind]<=target) take = func(ind-1,target-arr[ind],arr,dp);
		return dp[ind][target] = (take + dontTake)%mod;
	}
	public static int countPartitions(int n, int d, int[] arr) {
		int totSum = 0;
		for(int i=0;i<n;i++) totSum+=arr[i];
		
		if(totSum<d) return 0;
		if((totSum+d) % 2 == 1) return 0;
		
		int target = (totSum+d)/2;
		int[][] dp = new int[n][target+1];
		for(int[] row : dp) Arrays.fill(row,-1);
		
		return func(n-1,target,arr,dp);
	}
}

// a - (tot-a) = d
// a - tot + a = d
// 2a - tot = d
// a = (d+tot)/2;
