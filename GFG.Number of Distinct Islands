//{ Driver Code Starts
// Initial Template for Java

import java.util.*;
import java.lang.*;
import java.io.*;

// Position this line where user code will be pasted.

class GFG {
    public static void main(String[] args) throws IOException {
        Scanner sc = new Scanner(System.in);
        int T = sc.nextInt();
        while (T-- > 0) {
            int n = sc.nextInt();
            int m = sc.nextInt();
            int[][] grid = new int[n][m];

            for (int i = 0; i < n; i++) {

                for (int j = 0; j < m; j++) {
                    grid[i][j] = sc.nextInt();
                }
            }

            Solution ob = new Solution();
            int ans = ob.countDistinctIslands(grid);
            System.out.println(ans);
        }
    }
}
// } Driver Code Ends


// User function Template for Java

class Solution {
    String toString(int a,int b){
        String out = Integer.toString(a)+" "+Integer.toString(b);
        return out;
    }
    void dfs(int[][] grid,int[][] visited,int row,int col,ArrayList<String> arr,int row0,int col0){
        int m = grid.length;
        int n = grid[0].length;
        
        visited[row][col]=1;
        
        arr.add(toString(row-row0,col-col0));
        int[] dRow = {-1,0,1,0};
        int[] dCol = {0,-1,0,1};
        for(int i=0;i<4;i++){
            int nRow = row + dRow[i];
            int nCol = col + dCol[i];
            if(nRow>=0 && nRow<m && nCol>=0 && nCol<n && grid[nRow][nCol]==1
            && visited[nRow][nCol]==0) dfs(grid,visited,nRow,nCol,arr,row0,col0);
            
        }
    }

    int countDistinctIslands(int[][] grid) {
        int m = grid.length;
        int n = grid[0].length;
        
        int[][] visited = new int[m][n];
        HashSet<ArrayList<String>> ans = new HashSet<>();
        ArrayList<ArrayList<String>> dup = new ArrayList<>();
        ArrayList<String> arr = new ArrayList<>();
        
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(visited[i][j]==0 && grid[i][j]==1){
                    arr = new ArrayList<>();
                    dfs(grid,visited,i,j,arr,i,j);
                    ans.add(arr);
                    
                }
            }
        }

        return ans.size();
        
    }
}
