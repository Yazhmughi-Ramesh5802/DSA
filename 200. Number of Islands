class Pair{
    int first,second;
    Pair(int f,int s){
        first = f;
        second = s;
    }
}
class Solution {
    public void bfs(int f,int s,char[][] grid,int[][] visited){
        int m = grid.length;
        int n = grid[0].length;
        visited[f][s]=1;
        Queue <Pair> q = new LinkedList<>();
        Pair p = new Pair(f,s);
        q.add(p);
        int[] rows = {-1,1,0,0};
        int[] cols = {0,0,-1,1};
        while(!q.isEmpty()){
            int row = q.peek().first;
            int col = q.peek().second;
            q.remove();

            for(int i=0;i<4;i++){
                
                int nRow = row + rows[i];
                int nCol = col + cols[i];
                if(nRow>=0 && nRow<m && nCol>=0 && nCol<n && grid[nRow][nCol]=='1' && visited[nRow][nCol]==0){
                    Pair temp = new Pair(nRow,nCol);
                    q.add(temp);
                    visited[nRow][nCol]=1;
                }
                
            }
        }
    }
    public int numIslands(char[][] grid) {
        int m = grid.length;
        int n = grid[0].length;

        int count=0;
        int[][] visited = new int[m][n];
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(visited[i][j]==0 && grid[i][j]=='1'){
                    bfs(i,j,grid,visited);
                    count++;
                }
            }
        }
        return count;
    }
}
