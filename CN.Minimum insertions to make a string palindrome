import java.util.*;
public class Solution {
    public static int func(String s1,String s2){
        int n = s1.length();

        int[][] dp = new int[n+1][n+1];
        for(int[] row : dp) Arrays.fill(row,-1);
        for(int i=0;i<=n;i++) dp[i][0] = 0;
        for(int i=0;i<=n;i++) dp[0][i] = 0;

        for(int ind1 = 1;ind1<=n;ind1++){
            for(int ind2 = 1;ind2<=n;ind2++){
                if(s1.charAt(ind1-1) == s2.charAt(ind2-1)) dp[ind1][ind2] = 1 + dp[ind1-1][ind2-1];
                else dp[ind1][ind2] = Math.max(dp[ind1-1][ind2],dp[ind1][ind2-1]);
            }
        }
        return dp[n][n];
    }
    public static int minInsertion(String str) {
        // the main idea is to find the length of longest common palindromic subsequence 
        // of the string and reverse of the string
        // then perform total length of the string - size of long. common palindromic subseq.
        String rev = "";
        for(int i=str.length()-1;i>=0;i--) rev+=Character.toString(str.charAt(i));
        return str.length() - func(str,rev);
    }
}
// abca acba

// aca aca
// tot len = 4
// long comm subseq len = 3
// ans 4 - 3 = 1;
