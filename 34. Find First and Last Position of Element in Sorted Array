class Solution {
    public int left_search(int[] nums,int target){
        int low = 0;
        int high = nums.length-1;
        int index = -1;

        while(low <= high){
            int mid = (low + high) / 2;

            if(nums[mid] == target){
                index = mid;
                high = mid - 1; // left sub array
            }
            else if(nums[mid] < target){
                low = mid + 1;
            }
            else high = mid - 1;
        }
       
        return index;
    }
    public int right_search(int[] nums,int target){
        int low = 0;
        int high = nums.length-1;
        int index = -1;

        while(low <= high){
            int mid = (low + high) / 2;

            if(nums[mid] == target){
                index = mid;
                low = mid + 1; // right sub array
            }
            else if(nums[mid] < target){
                low = mid + 1;
            }
            else high = mid - 1;
        }
        
        return index;
    }
    public int[] searchRange(int[] nums, int target) {
        int[] ans = new int[2];
        ans[0] = left_search(nums,target); // to find start index
        ans[1] = right_search(nums,target); // to find last index

        return ans;

        
    }
}
