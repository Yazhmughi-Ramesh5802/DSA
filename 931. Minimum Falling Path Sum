class Solution {
    public static int func(int i,int j,int[][] matrix,int m,int[][] dp){
        
        if(j<0 || j>m-1) return (int)Math.pow(10,9);

        if(i==0) return dp[i][j] = matrix[i][j];
        if(dp[i][j]!=-1) return dp[i][j];
        int up = matrix[i][j] + func(i-1,j,matrix,m,dp);
        int rightDiag = matrix[i][j] + func(i-1,j+1,matrix,m,dp);
        int leftDiag = matrix[i][j] + func(i-1,j-1,matrix,m,dp);

        return dp[i][j] = Math.min(up,Math.min(rightDiag,leftDiag));
    }
    public int minFallingPathSum(int[][] matrix) {
        int m = matrix.length;
        int[][] dp = new int[m][m];
        //for(int[] row : dp) Arrays.fill(row,-1);
        // int mini = Integer.MAX_VALUE;
        // for(int i=0;i<m;i++){
        //     mini = Math.min(mini,func(m-1,i,matrix,m,dp));
        // }

        for(int i=0;i<m;i++){
            dp[0][i] = matrix[0][i];
        }

        for(int i=1;i<m;i++){
            for(int j=0;j<m;j++){

                int up = matrix[i][j] + dp[i-1][j];

                int leftDiag = matrix[i][j];
                if(j>0) leftDiag+=dp[i-1][j-1];
                else leftDiag+=(int)Math.pow(10,9);
                
                int rightDiag = matrix[i][j];
                if(j<m-1) rightDiag+=dp[i-1][j+1];
                else rightDiag+=(int)Math.pow(10,9);

                dp[i][j] = Math.min(up,Math.min(leftDiag,rightDiag));
            }
        }
        int mini = dp[m-1][0];
        for(int i=1;i<m;i++){
            mini = Math.min(mini,dp[m-1][i]);
        }
        return mini;
    }
}
