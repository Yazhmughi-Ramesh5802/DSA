class Pair{
    int row,col,time;
    Pair(int row,int col,int time){
        this.row=row;
        this.col=col;
        this.time=time;
    }
}
class Solution {
    public int orangesRotting(int[][] grid) {
        int m = grid.length;
        int n = grid[0].length;
        Queue <Pair> q = new LinkedList<>();
        int[][] visited = new int[m][n];
        int cntFresh=0;
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j]==2){
                    Pair p = new Pair(i,j,0);
                    q.add(p);
                    visited[i][j]=2;
                }
                else if(grid[i][j]==1){
                    cntFresh++;
                    visited[i][j]=0;
                }
                else if(grid[i][j]==0) visited[i][j]=0;
            }
        }

        int cnt=0;
        int time=0;
        int[] drow = {-1,1,0,0};
        int[] dcol = {0,0,-1,1};
        System.out.println(cntFresh);
        while(!q.isEmpty()){
            int r = q.peek().row;
            int c = q.peek().col;
            int t = q.peek().time;
            q.remove();
            time = Math.max(time,t);
            for(int i=0;i<4;i++){
                int newRow = r + drow[i];
                int newCol = c + dcol[i];
                if(newRow>=0 && newRow<m && newCol>=0 && newCol<n && visited[newRow][newCol]==0 && grid[newRow][newCol]==1){
                    visited[newRow][newCol]=2;
                    Pair p = new Pair(newRow,newCol,t+1);
                    q.add(p);
                    cnt++;
                }
            }
        }
        
        System.out.println(cnt);
        if(cnt!=cntFresh) return -1;
        else return time;
    }
}

