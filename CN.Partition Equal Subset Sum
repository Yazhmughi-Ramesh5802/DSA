public class Solution {
	public static boolean func(int i,int[] arr,int target,int[][] dp){
		if(target==0) return true;
		if(i==0) return (arr[0]==target);
		if(dp[i][target]!=-1) {
			if(dp[i][target]==1) return true;
			else return false;
		}
		boolean dontTake = func(i-1,arr,target,dp);
		boolean take = false;
		if(arr[i]<=target) take = func(i-1,arr,target-arr[i],dp);
		dp[i][target] = (dontTake || take)? 1 : 0;
		return dontTake || take;
	}
	public static boolean canPartition(int[] arr, int n) {
		int sum = 0;
		for(int i=0;i<n;i++) sum+=arr[i];
		
		
		if(sum%2==1) return false;
		int target = sum/2;

		int[][] dp = new int[n][target+1];
		for(int i=0;i<n;i++){
			for(int j=0;j<=target;j++) dp[i][j]=-1;
		}
		return func(n-1,arr,target,dp);
	}
}
