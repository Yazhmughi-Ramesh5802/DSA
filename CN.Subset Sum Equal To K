import java.util.* ;
import java.io.*; 
import java.util.* ;
import java.io.*; 
public class Solution {
    public static boolean func(int ind,int target,int[] arr,int[][] dp){
        if(target==0) return true;
        if(ind==0) return (arr[0]==target);
        
        if(dp[ind][target]!=-1) return (dp[ind][target]==1)? true : false ;
        boolean dontTake = func(ind - 1,target,arr,dp);
        boolean take = false;
        if(arr[ind]<=target) take = func(ind - 1,target-arr[ind],arr,dp);
        dp[ind][target]=(dontTake || take)? 1 : 0;
        return (dontTake || take);
        
    }
    public static boolean subsetSumToK(int n, int k, int arr[]){
        
        //int[][] dp = new int[n][k+1];
        // for(int[] row : dp) Arrays.fill(row,-1); 
        // return func(n-1,k,arr,dp);
        
        boolean[][] dp = new boolean[n][k+1];
        for(int i=0;i<n;i++) dp[i][0] = true;
        if(arr[0]<=k) dp[0][arr[0]] = true;
        
        for(int i=1;i<n;i++){
            for(int target=1;target<=k;target++){
                boolean dontTake = dp[i-1][target];
                boolean take = false;
                if(arr[i]<=target) take = dp[i-1][target-arr[i]];
                dp[i][target] = (dontTake || take);
            }
        }
        return dp[n-1][k];
    }
}

