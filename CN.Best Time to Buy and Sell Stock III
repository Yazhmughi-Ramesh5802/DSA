
import java.util.*;
public class Solution {
    public static int func(int i,int buy,int maxTrans,int n,int[] prices,int[][][] dp){
        if(maxTrans == 0) return 0;
        if(i == n) return 0;
        
        int profit = 0;
        if(dp[i][buy][maxTrans] != -1) return dp[i][buy][maxTrans];

        if(buy == 0){
            int take = -prices[i] + func(i+1,1,maxTrans,n,prices,dp);
            int dontTake = 0 + func(i+1,0,maxTrans,n,prices,dp);
            profit = Math.max(take,dontTake);
            return dp[i][buy][maxTrans] = profit;
        }
        else{
            int sell = prices[i] + func(i+1,0,maxTrans-1,n,prices,dp);
            int dontSell = 0 + func(i+1,1,maxTrans,n,prices,dp);
            profit = Math.max(sell,dontSell);
            return dp[i][buy][maxTrans] = profit;
        }




    }
    public static int maxProfit(int []prices) {
        int n = prices.length;
        int[][][] dp = new int[n][2][3]; 
        for(int[][] row1 : dp){
            for(int[] row2 : row1) Arrays.fill(row2,-1);
        }
        return func(0,0,2,n,prices,dp);
        
        
        // check this solution once
        //int[][][] dp = new int[n+1][2][3];
        //n=0 default it is zero
        // dp[n][0][0] = 0;
        // dp[n][0][1] = 0;
        // dp[n][0][2] = 0;
        // dp[n][1][0] = 0;
        // dp[n][1][1] = 0;
        // dp[n][1][2] = 0;

        // int profit = 0;
        // for(int i=n-1;i>=0;i--){
        //     for(int buy=0;buy<=1;buy++){
        //         for(int maxTrans = 1;maxTrans<=2;maxTrans++){
        //             if(buy == 0){
        //                 int take = -prices[i] + dp[i+1][1][maxTrans];
        //                 int dontTake = 0 + dp[i+1][1][maxTrans];
        //                 profit = Math.max(take,dontTake);
        //                 dp[i][buy][maxTrans] = profit; 
        //             }
        //             if(buy==1){
        //                 int sell = prices[i] + dp[i+1][0][maxTrans-1];
        //                 int dontSell = 0 + dp[i+1][1][maxTrans];
        //                 profit = Math.max(sell,dontSell);  
        //                 dp[i][buy][maxTrans] = profit;
        //             }
                    
        //         }
                
        //     }
        // }
        // return dp[0][0][2];
        
        
        
    }
}
